/* Generated By:JavaCC: Do not edit this line. Parser.java */
    package antelope.booleanmodel.formula.parser;

    import antelope.*;
    import antelope.booleanmodel.*;
    import antelope.booleanmodel.formula.*;

    public class Parser implements ParserConstants {
        private BooleanModel model = new BooleanModel();

  final public Model equation_list() throws ParseException {
      NextStateAssignment assign;
    label_1:
    while (true) {
      assign = assignment();
                              model.addTransition(assign);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
    }
    jj_consume_token(0);
      {if (true) return model;}
    throw new Error("Missing return statement in function");
  }

  final public NextStateAssignment assignment() throws ParseException {
        Token t;
        Formula f1 = null, f2 = null;
    t = jj_consume_token(IDENTIFIER);
    jj_consume_token(ASSIGN);
    f1 = formula();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COMMA:
      jj_consume_token(COMMA);
      f2 = formula();
      break;
    default:
      jj_la1[1] = jj_gen;
      ;
    }
    jj_consume_token(COLON);
        model.addVariable(t.image);
        {if (true) return new NextStateAssignment(new Variable(t.image), f1, f2);}
    throw new Error("Missing return statement in function");
  }

  final public Formula formula() throws ParseException {
        Formula f;
    f = iff_expression();
      {if (true) return f;}
    throw new Error("Missing return statement in function");
  }

  final public Formula iff_expression() throws ParseException {
        Formula f1, f2;
        Token t;
    f1 = impl_expression();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IFF:
      t = jj_consume_token(IFF);
      f2 = iff_expression();
          f1 = new Iff(f1, f2);
      break;
    default:
      jj_la1[2] = jj_gen;
      ;
    }
      {if (true) return f1;}
    throw new Error("Missing return statement in function");
  }

  final public Formula impl_expression() throws ParseException {
        Formula f1, f2;
        Token t;
    f1 = or_expression();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IMPLIES:
      t = jj_consume_token(IMPLIES);
      f2 = impl_expression();
          f1 = new Implication(f1, f2);
      break;
    default:
      jj_la1[3] = jj_gen;
      ;
    }
      {if (true) return f1;}
    throw new Error("Missing return statement in function");
  }

  final public Formula or_expression() throws ParseException {
        Formula f1, f2;
        Token t;
    f1 = and_expression();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case OR:
      t = jj_consume_token(OR);
      f2 = or_expression();
          f1 = new Or(f1, f2);
      break;
    default:
      jj_la1[4] = jj_gen;
      ;
    }
      {if (true) return f1;}
    throw new Error("Missing return statement in function");
  }

  final public Formula and_expression() throws ParseException {
        Formula f1, f2;
        Token t;
    f1 = prefix_expression();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case AND:
      t = jj_consume_token(AND);
      f2 = and_expression();
          f1 = new And(f1, f2);
      break;
    default:
      jj_la1[5] = jj_gen;
      ;
    }
      {if (true) return f1;}
    throw new Error("Missing return statement in function");
  }

  final public Formula prefix_expression() throws ParseException {
        Formula f;
        Token   t, varName;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NOT:
      t = jj_consume_token(NOT);
      f = prefix_expression();
          {if (true) return new Not(f);}
      break;
    case LPAR:
    case TRUE:
    case FALSE:
    case IDENTIFIER:
      f = basic_expression();
                               {if (true) return f;}
      break;
    default:
      jj_la1[6] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public Formula basic_expression() throws ParseException {
        Formula f, f1, f2;
        Token t,v;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      t = jj_consume_token(IDENTIFIER);
                           model.addVariable(t.image); {if (true) return new Variable(t.image);}
      break;
    case TRUE:
      t = jj_consume_token(TRUE);
                      {if (true) return new BooleanConstant(true);}
      break;
    case FALSE:
      t = jj_consume_token(FALSE);
                      {if (true) return new BooleanConstant(false);}
      break;
    case LPAR:
      jj_consume_token(LPAR);
      f = iff_expression();
      jj_consume_token(RPAR);
                                             {if (true) return f;}
      break;
    default:
      jj_la1[7] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  /** Generated Token Manager. */
  public ParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[8];
  static private int[] jj_la1_0;
  static {
      jj_la1_init_0();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x400000,0x10000,0x800,0x1000,0x400,0x200,0x702100,0x702000,};
   }

  /** Constructor with InputStream. */
  public Parser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Parser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new ParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 8; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 8; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public Parser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new ParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 8; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 8; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public Parser(ParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 8; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(ParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 8; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[29];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 8; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 29; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

    }
